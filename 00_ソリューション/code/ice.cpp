//*****************************************************
//
// 氷の処理[ice.cpp]
// Author:髙山桃也
//
//*****************************************************

//*****************************************************
// インクルード
//*****************************************************
#include "ice.h"

//*****************************************************
// 定数定義
//*****************************************************
namespace
{
const float SPEED_FLOWS = 1.0f;	// 流れる速度
}

//*****************************************************
// 静的メンバ変数宣言
//*****************************************************


//=====================================================
// コンストラクタ
//=====================================================
CIce::CIce(int nPriority) : CObjectX(nPriority), m_state(STATE::STATE_NONE)
{

}

//=====================================================
// デストラクタ
//=====================================================
CIce::~CIce()
{

}

//=====================================================
// 生成処理
//=====================================================
CIce *CIce::Create(STATE state)
{
	CIce *pIce = nullptr;

	if (pIce == nullptr)
	{
		pIce = new CIce;

		if (pIce != nullptr)
		{
			pIce->m_state = state;
			pIce->Init();
		}
	}

	return pIce;
}

//=====================================================
// 初期化処理
//=====================================================
HRESULT CIce::Init(void)
{
	// 継承クラスの初期化
	CObjectX::Init();

	// モデルの読込
	int nIdx = CModel::Load("data\\MODEL\\block\\ice00.x");
	BindModel(nIdx);

	return S_OK;
}

//=====================================================
// 終了処理
//=====================================================
void CIce::Uninit(void)
{
	// 継承クラスの終了
	CObjectX::Uninit();
}

//=====================================================
// 更新処理
//=====================================================
void CIce::Update(void)
{
	// 継承クラスの更新
	CObjectX::Update();

	if (m_state == STATE::STATE_FLOWS)
	{// 流れる状態では移動を続ける
		Flows();
	}
}

//=====================================================
// 流れる処理
//=====================================================
void CIce::Flows(void)
{
	AddPosition(D3DXVECTOR3(SPEED_FLOWS, 0.0f, 0.0f));
}

//=====================================================
// 描画処理
//=====================================================
void CIce::Draw(void)
{
	// 継承クラスの描画
	CObjectX::Draw();
}