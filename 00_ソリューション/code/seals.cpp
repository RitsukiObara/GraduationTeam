//*****************************************************
//
// 敵の処理[enemy.cpp]
// Author:早川友貴
//
//*****************************************************

//*****************************************************
// インクルード
//*****************************************************
#include "seals.h"
#include "inputManager.h"
#include "inputkeyboard.h"
#include "iceManager.h"
#include "player.h"
#include "debugproc.h"

//*****************************************************
// 定数定義
//*****************************************************
namespace
{
	const std::string PATH_BODY = "data\\MOTION\\motionSeals.txt";	// ボディのパス
}

//=====================================================
// 優先順位を決めるコンストラクタ
//=====================================================
CSeals::CSeals(int nPriority) : CEnemy()
{

}

//=====================================================
// デストラクタ
//=====================================================
CSeals::~CSeals()
{

}

//=====================================================
// 生成処理
//=====================================================
CSeals* CSeals::Create(void)
{
	CSeals* pSeals = nullptr;

	pSeals = new CSeals;

	if (pSeals != nullptr)
	{
		pSeals->Init();
	}

	return pSeals;
}

//=====================================================
// 初期化処理
//=====================================================
HRESULT CSeals::Init(void)
{
	// 読込
	Load((char*)&PATH_BODY[0]);

	if (FAILED(CEnemy::Init()))
	{ 
		return E_FAIL;
	}

	SetMotion(0);

	// ポーズ初期化
	InitPose(0);

	return S_OK;
}

//=====================================================
// 終了処理
//=====================================================
void CSeals::Uninit(void)
{
	CEnemy::Uninit();
}

//=====================================================
// 更新処理
//=====================================================
void CSeals::Update(void)
{
	// 継承クラスの更新
	CEnemy::Update();
}

//=====================================================
// 停止状態の更新
//=====================================================
void CSeals::UpdateStop(void)
{
	CollidePlayer();
}

//=====================================================
// 移動状態の更新
//=====================================================
void CSeals::UpdateMove(void)
{
	// プレイヤーとの判定
	CollidePlayer();
}

//=====================================================
// 攻撃状態の更新
//=====================================================
void CSeals::UpdateAttack(void)
{

}

//=====================================================
// 漂流状態の更新
//=====================================================
void CSeals::UpdateDrift(void)
{
	CEnemy::UpdateDrift();
}

//=====================================================
// プレイヤーとの判定
//=====================================================
void CSeals::CollidePlayer(void)
{
	// プレイヤーインスタンス取得
	vector<CPlayer*> apPlayer = CPlayer::GetInstance();

	if (apPlayer.empty())
		return;	// 配列が空なら終了

	for (auto it : apPlayer)
	{
		if (it == nullptr)
			continue;

		// プレイヤーのグリッド番号取得
		int nIdxVPlayer = it->GetGridV();
		int nIdxHPlayer = it->GetGridH();

		// 自身のグリッド番号
		int nIdxV = GetGridV();
		int nIdxH = GetGridH();

		if (nIdxV == nIdxVPlayer && nIdxH == nIdxHPlayer)
		{// 自身のグリッド番号と縦横が一致する場合、相手のヒット処理を呼ぶ
			it->Hit(0.0f);	// 即死なのでダメージは0
		}
	}
}

//=====================================================
// 描画処理
//=====================================================
void CSeals::Draw(void)
{
	// 継承クラスの描画
	CEnemy::Draw();
}