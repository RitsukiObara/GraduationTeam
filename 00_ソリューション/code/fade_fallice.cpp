//*****************************************************
//
// フェード処理（氷が落ちてくる）[fade_fallice.cpp]
// Author:石原颯馬
//
//*****************************************************

//*****************************************************
// インクルード
//*****************************************************
#include "fade_fallice.h"

//*****************************************************
// マクロ定義
//*****************************************************


//*****************************************************
// 静的メンバ変数宣言
//*****************************************************
CFade_FallIce* CFade_FallIce::m_pFade = nullptr;	// 自身のポインタ

//=====================================================
// コンストラクタ
//=====================================================
CFade_FallIce::CFade_FallIce()
{
	
}

//=====================================================
// デストラクタ
//=====================================================
CFade_FallIce::~CFade_FallIce()
{

}

//=====================================================
// 生成処理
//=====================================================
CFade_FallIce* CFade_FallIce::Create(void)
{
	if (m_pFade == nullptr)
	{
		m_pFade = new CFade_FallIce;

		if (m_pFade != nullptr)
		{
			m_pFade->Init();
		}
	}

	return m_pFade;
}

//=====================================================
// 初期化処理
//=====================================================
HRESULT CFade_FallIce::Init(void)
{
	//情報の設定


	return S_OK;
}

//=====================================================
// 終了処理
//=====================================================
void CFade_FallIce::Uninit(void)
{
	delete this;
}

//=====================================================
// 更新処理
//=====================================================
void CFade_FallIce::Update(void)
{
	//if (m_fade != FADE_NONE)
	//{
	//	if (m_fade == FADE_IN)
	//	{//フェードイン状態
	//		m_col.a += FADE_SPEED;
	//		
	//		if (m_col.a >= 1.0f)
	//		{//ポリゴンが完全に不透明になったら
	//			m_col.a = 1.0f;
	//			m_fade = FADE_OUT;

	//			if (m_bTrans)
	//			{
	//				Blur::ResetBlur();

	//				//モード設定
	//				CManager::SetMode(m_modeNext);
	//			}
	//		}
	//	}
	//	else if (m_fade == FADE_OUT)
	//	{//フェードアウト状態
	//		m_col.a -= FADE_SPEED;

	//		if (m_col.a <= 0.0f)
	//		{//ポリゴンが完全に不透明になったら
	//			m_col = { 0.0f,0.0f,0.0f,0.0f };
	//			m_fade = FADE_NONE;
	//		}
	//	}

	//	//頂点情報のポインタ
	//	VERTEX_2D *pVtx;

	//	//頂点バッファをロックし、頂点情報へのポインタを取得
	//	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//	//頂点カラーの設定
	//	pVtx[0].col = m_col;
	//	pVtx[1].col = m_col;
	//	pVtx[2].col = m_col;
	//	pVtx[3].col = m_col;

	//	//頂点バッファをアンロック
	//	m_pVtxBuff->Unlock();
	//}
}

//=====================================================
// 描画処理
//=====================================================
void CFade_FallIce::Draw(void)
{
	
}

//=====================================================
// 設定処理
//=====================================================
void CFade_FallIce::SetFade(CScene::MODE modeNext, bool bTrans)
{
	/*if (m_fade == FADE_NONE)
	{
		m_fade = FADE_IN;
		m_modeNext = modeNext;
		m_col.a = 0.0f;

		m_bTrans = bTrans;
	}*/
}
